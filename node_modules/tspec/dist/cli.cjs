#!/usr/bin/env node
'use strict';

var node_fs = require('node:fs');
var node_url = require('node:url');
var yargs = require('yargs');
var helpers = require('yargs/helpers');
var index = require('./chunks/index.cjs');
require('express');
require('http-proxy-middleware');
require('swagger-ui-express');
require('fs/promises');
require('path');
require('debug');
require('glob');
require('typescript');
require('typescript-json-schema');
require('json-schema-to-openapi-schema');

var SupportedSpecVersion; (function (SupportedSpecVersion) {
  const THREE = 3; SupportedSpecVersion[SupportedSpecVersion["THREE"] = THREE] = "THREE";
})(SupportedSpecVersion || (SupportedSpecVersion = {}));



















const baseOptions = {
  specPathGlobs: { type: 'array', default: index.defaultGenerateParams.specPathGlobs },
  tsconfigPath: { type: 'string', default: index.defaultGenerateParams.tsconfigPath },
  configPath: { type: 'string', default: index.defaultGenerateParams.configPath },
  outputPath: { type: 'string' },
  specVersion: { type: 'number' },
  openapiTitle: { type: 'string', default: index.defaultGenerateParams.openapi.title },
  openapiVersion: { type: 'string', default: index.defaultGenerateParams.openapi.version },
  openapiDescription: { type: 'string', default: index.defaultGenerateParams.openapi.description },
  debug: { type: 'boolean', default: index.defaultGenerateParams.debug },
  ignoreErrors: { type: 'boolean', default: index.defaultGenerateParams.ignoreErrors },
} ;

const generatorOptions = {
  ...baseOptions,
  outputPath: { type: 'string', default: 'openapi.json' },
} ;

const runServerOptions = {
  ...baseOptions,
  port: { type: 'number', default: 7000 },
  proxyHost: { type: 'string' },
} ;

const validateGeneratorOptions = (args) => {
  if (args.specVersion && !Object.values(SupportedSpecVersion).includes(args.specVersion)) {
    // eslint-disable-next-line max-len
    throw new Error(`Tspec currently supports only OpenAPI Spec with version ${Object.values(SupportedSpecVersion).join(', ')}.`);
  }

  return {
    specPathGlobs: args.specPathGlobs !== index.defaultGenerateParams.specPathGlobs
      ? args.specPathGlobs.map((glob) => glob.toString())
      : undefined,
    tsconfigPath: args.tsconfigPath !== index.defaultGenerateParams.tsconfigPath ? args.tsconfigPath : undefined,
    configPath: args.configPath !== index.defaultGenerateParams.configPath ? args.configPath : undefined,
    outputPath: args.outputPath,
    specVersion: args.specVersion !== index.defaultGenerateParams.specVersion ? args.specVersion : undefined,
    openapi: {
      title: args.openapiTitle !== index.defaultGenerateParams.openapi.title ? args.openapiTitle : undefined,
      version: args.openapiVersion !== index.defaultGenerateParams.openapi.version ? args.openapiVersion : undefined,
      description: args.openapiDescription !== index.defaultGenerateParams.openapi.description
        ? args.openapiDescription
        : undefined,
    },
    debug: args.debug !== index.defaultGenerateParams.debug ? args.debug : undefined,
    ignoreErrors: args.ignoreErrors !== index.defaultGenerateParams.ignoreErrors ? args.ignoreErrors : undefined,
  };
};

const specGenerator = async (args) => {
  const generateTspecParams = await validateGeneratorOptions(args);
  await index.generateTspec(generateTspecParams);
};

const startTspecServer = async (args) => {
  const generateTspecParams = await validateGeneratorOptions(args);
  index.initTspecServer({ ...generateTspecParams, port: args.port, proxyHost: args.proxyHost });
};

const runCli = async () => yargs(helpers.hideBin(process.argv))
  .usage('Usage: $0 <command> [options]')
  .command(
    'generate',
    'Generate OpenAPI Spec from Tspec',
    generatorOptions,
    (yargs) => specGenerator(yargs),
  )
  .command(
    'server',
    'Start Tspec server',
    runServerOptions,
    (yargs) => startTspecServer(yargs),
  )
  .help('help')
  .alias('help', 'h')
  .parse();

if ((typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (document.currentScript && document.currentScript.src || new URL('cli.cjs', document.baseURI).href)).startsWith('file:')) {
  const modulePath = node_fs.realpathSync(node_url.fileURLToPath((typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (document.currentScript && document.currentScript.src || new URL('cli.cjs', document.baseURI).href))));
  if (node_fs.realpathSync(process.argv[1]) === modulePath) {
    runCli();
  }
}

exports.runCli = runCli;
